% vi: ft=viki:tw=110

* Old Body Young Soul.

*** Old body:
    * __tries to be somthing else_ "new" operator
    * possiblity of using not define variables. Global variable problem.
    * possibilty of overriding key word like this or function. 

*** Young soul:
    * Simplicity.
    * Easy way to share common behevior.

Zeby pokazac kolejna mloda nute js, odniose sie do czesto napotyknaych przezemnie problemu. Zle rozumianego
Dry i blednego dziediczenia.

Inheritance: Technicznie w brew pozorą nie wiele sie rozni.  W tym i tym przypadku afektujemy nie warunkowo
kod (zawsze). W tym i wtym przypadku mozemy korzystac z prywatnych metod. Sprawdz pola !!!  Podejsciowo
bardzo. W klasycznym ujeciu wrecz musimy bazowac na obkiecie parenta:
    - nadpisac metody,
    - dodac nowe,
    - korzystac ze zmiennych prottected.  Nie ma tu w takim razie jasnego kontraktu pomiedzy przodkiem a
      dzieckiem.  W przypadku includowania modulow jest nieco inaczej lub przynajmniej powinno byc.  Zadaniem
      modulow jest __rozszezanie__. Zatem dodanie pewnej wlasnosci. To jest bardziej koncepcyjnie jak
      dziedziczenie ale po interfejscie z gotową już implementacja. Skoro tak to tu juz istniec musi pewien
      kontrakt pomiedzy klasmui rozszezanyni a modulem ktory je rozszeza. Im ten kontrak jest bardziej
      generyczny tym lepiej.  Jakis fajny przyklad by sie przydal !!!
      [[~/Documents/Articles/js/NonSeriesArticles/solary_calcualtion_as_well_understand_rsp.txt][Solary calculation as well understand SRP exaples]]

    sposoby ujecie tematu young soul, pretekst do lepszego design.  mozemy miwic o lepsxym podejsciu do np
dziedziczenia.  Mozemy tez przez zrozumienie charakterystycznych cech js na koncu dojsc do tego dlsczego
pomags to , dlaczego jest pretekstem.

co jest najbardziej, charakterystyczna rzecza w js. prosty i naturalny , chodz nie jestesmy do tego
przekonani.  tworzenie obiektow, bad parts takze :).  moze bsrdziej naturalnosc.  co nam ten prototype wnosi,
daje?  bardzo dobre pytanie.  czy wogule to cos zmienia .  Dlaczego polubilem rubiego. dawal odpowiedz jak
lepiej radzic sobie z uwpolnianiem kodu. zobaczmy czy mozna to zrobic js albo czy nie mozna zrobic to lepiej.
odwolujac sie do tworzenia obiektow pokazac jak latwiej je jeszcze rozszezac niz w rubim. plus meta duck
typing you dknt need types . inaczej skoro masz dack typing i na zawnatrz twoj obiekt jest traktowany jak
generyczny objekt to po co ci typy.  mozemy pujsc dalej.  osobiscie przeszkadza mi pisanie w rubim klas ktore
z nazwy sa tylko generyczne . czy nie bylo by fajniej zrobic klase wpelni dzialajac ale w domenie majaca swoje
miejsce. gdy zas naprawde potrzebujemy abstrakcji nazywajmy je zgodnir z domenu. np . personable not person ,
nie bedzie potrzeby uzywa. modulu. nie jestem tego jeszcze pewien.

zeby to zrozumiec.  dodstkowo mamy tu tako meta duck typing. czasami twoj objekt moze byc modulem zbiorem na
wspolne funkcjonalnosci, czasami dzialajaca instancja. ulatwia , jest to dla nas przezroczyste, nie musosz
nazywac klas abstrakcyjne. bazowac bardziej na domenie. nie person a personable.  i plastycznosc pl. idea
tworzenia obietu jest rozna nuiz java, c# albo nawet ruby.  do tworzenia obiektow nie uzywamy dodatkowej
abstrakcji jak klasa.  wykorzystujem cos wrodzaju bloku kodu i zwykle przypisanie.  ok. ale jak uwspolniamy ta
sama grupe zachowan ? prototype: idea - jeden obiekt powstaje na bazie drugiego.  rysunek z dziedziczeniem.
wyjasnienie ze tworzenie nowej instancji jak i obiektu bazowego dla innych to to samo. dla programisty powinno
byc przezroczyste. co to wnosi. pozbywamy sie dodatkowej abstrakcji klasy.  upraszczmy cos co wklasycznym
jezyku nazywamy dziedziczrniem.

Do punktu 10.
No dobra ale co w przypadku kiedy mamy zbior cech ktore nie tworza wpelni funkcjonalengo obiektu. Np. murzyn i
chiczyk maja czesc rzeczy wspolnych. Nazwimy je czlowiek. Wszystko zalerzy czy ta rola wystepuje w domenie
jesli tak to obkiet jesli nie to co ?. Posluzrzmy sie poprostu domena. Jesli instje w naszym systemie rola dla
czlowieka stworzmy obiket Person. Jak nie istnieje poprostu storzmy obiek. zbior cech personalble. czy
potrebujemy dodatkowej infrmacji zebyt to rozroznic? jak modul? Wydaje mi sie ze nie ze domena w tym przypadku
doskonale mowi za siebie.

to wszystko ma doprowadzic do dci. 

** Tresc

Moze na poczatek troche wyjasnienia o samycm tytule. Mysle ze najlepiej poznawac jezyk patrzac sie na jego
cechy charakterystyczne a co moze byc bardziej charakterystycznego niz dobre i slabe strony.



Tagi:
    * OOP.
    
* SRP.
