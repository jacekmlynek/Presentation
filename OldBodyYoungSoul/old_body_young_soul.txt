title: Old body young soul
author: Jacek Mlynek


!SLIDE

## Dlaczego tak o javascript?

### Czyż nie miło jest poznawać __"COŚ"__ nie zaczynając od podstaw?

Po co zaczynać zawsze od początku? Po co uczyć się tego co w większości jest podobne?

### Najlepiej poznawać poprzez charakterystyczne cechy.

Skoro znasz to co zawsze jest na początku, zacznij od tego co najbardziej różne. Zacznij od cech charakterystycznych

### Co może być bardziej charakterystycznego niż ciało i dusza? :)

Ciało to jak zawsze coś materialnego, namacalnego coś co z wiekiem się zużywa. Dusza niezależnie od wieku pozostaje wiecznie młoda.

!SLIDE

## Coś się tak uparł na ten javscript?

### Po pierwsze oświadczam że to tylko platoniczna _"miłość"_.

Z tego związku dzieci nie będzie.

### To dobre wyzwanie.

Sprawić aby tak doświadczeni programiści, znający kilka języków, mający wiele lat doświadczenia chcieli zainteresować się tym językiem przez małe _"j"_ - __bezcenne__.

!SLIDE

## A na co nam to? 

### Nie dlatego żeby pisać lepszy kod w javascript!

Może będziecie musieli może nie. Może za rok będą takie super narzędzia że nie będzie to konieczne. Będą robić wszystko za Nas.

### Dlatego żeby pisać lepszy kod!

Rozumiejąc to co złe i dobre w jednym języku, pomaga nam szukać dobrych rozwiązań w innym. 
Potraktujcie javascript jako __"pretekst"__, tak jak np. zabawkę do nauki tabliczki mnożenia.
Poznając ten prosty język zobaczycie jak wiele zagadnień staje się bardziej klarownych.


!SLIDE

## Ale jak (roz)poznać ten javascript?

### Dawno, dawno temu ...

Odwołajmy się do doświadczenia pokoleń programistów. Przypomnijmy sobie jak ono się zmieniało i zobaczmy gdzie teraz jest javascript.

### Współcześnie

Zobaczmy czy javascript mimo swojego wieku dotrzymuje kroku współcześnie mainstremowym językom kroku. 

!SLIDE

## Proste jest piękne!

    Doświadczenia kilku pokoleń programistów uczą że im mniej coś skomplikowane tym lepiej.  
   
### Javascript jest prostym językiem:

* prosta struktura obiektu (na niem wzorowano _json_),
* plastyczność - rozszerzalność,
* luźne typowanie (duck typing),
* lambda aka domknięcie aka _closur_,
* brak klas,
* tylko kilka typów wbudowanych.

!SLIDE

## Przykład prostego obiektu _jeż_
    
    var jez = {
        waga: 100,
        wiek: 7,
        szybkosc: 10,
        iloscJablekNaKolcach: 3,
        oczy: piwne,
        jedzTaKure: function() {},
        dzgnijKolcem: function() {}
        };

## No dobra ale jak te dane czy zachowanie _uwspólnić_ na grupę obiektów?

!SLIDE

## Tak radzą sobie _"profesjonaliści"_!

### Klasy.
Od wielu już lat poprzez takie języki jak C++, java, C# czy nawet Ruby głównym sposobem tworzenia kolejnych instancji obiektów są klasy. 

### Co dają nam klasy:
* dają początek grupie obiektów,
* miejsce na definiowania wspólnych cech grupy obiektów,

### Co mogą ograniczać przy modelowaniu __domeny__:
* źle rozumiany DRY może prowadzić do niewłaściwego dziedziczenia (klasa domenowa dziedziczy po narzędziowej),
* mocne powiązania w relacji dziedziczenia klas często jest powodem naruszenia  
[Liskov substitution principle](http://en.wikipedia.org/wiki/Liskov_substitution_principle),
* _dodatkowa abstrakcja_

!SLIDE

## Naruszenie LSP i SRP.

#### Przykład I
    Ksiądz, normalnie dobry i uczciwy, niestety z czasem łasuch kościelnej tacy (złodziej). W rzeczywistości ten sam obiekt ma dwie odmienne funkcje. W kodzie nie łamiąc SRP było by nie możliwe stworzenie klasy która jest księdzem i złodziejem w jednym.  
   
#### Przykład II
    Z matematycznego punktu widzenia każdy kwadrat jest prostokątem, dlatego z punktu widzenia geometrii kwadrat jak najbardziej dziedziczy po prostokącie. Co się jednak stanie kiedy nadpiszemy w kwadracie długość i szerokość tak aby wskazywały na jedno pole (jedno ramie kwadratu) i będziemy chcieli policzyć pole?

!SLIDE

## Naruszenie LSP cd.
{{{
def client_of_rectangle(rectangle)
    rectangle.width = 5;
    rectangle.height = 4;
    raise "Bad area!" if rectangle.Area() != 20
end
client_of_rectangle(rectangle) \\ok
client_of_rectangle(square) \\rais exeption
}}}
Kwadrat naruszył _"kontrakt"_ klasy prostokąt. Problem w tym że nie naruszył samego kwadrata.

>   The validity of a model can be expressed only in terms of its __clients__. 

!SLIDE 

## Ok. Ale czy obiekt może istnieć bez klasy?

## W js jak najbardziej. Więcej, nawet jest to naturalniejsze, niż próba ich modelowania.

## Czy to w jakiś sposób pomoże?

!SLIDE 

## Js zaczyna nabierać kolorów.

    Zapomnijmy na razie o tym co wiemy o tworzeniu obiektów. Wróćmy do tego na czym twórcy języków się wzorowali. Do przyrody.

***    

    Czy w przyrodzie osobnik X powstaje z jakieś wydmuszki (klasa)?

***

    Nie! Powstaje z innego w pełni „funkcjonalnego” osobnika.


!SLIDE

## Przykład _samochodu_ jako prototypu.

![Transparent Inheritance](./img/TransparencyInheritanceV5.jpg "Transparent Inheritance")

!SLIDE 

## Przykład _samochodu_ - js.

{{{
  var myOffRoadCar = Object.create(myCar);
    
  myOffRoadCar.name = "My off road car, its not prototyp, it can be, but now not nessesery";
  myOffRoadCar.sound = "road hrrr szrr"; // should overide mycar sound.
  myOffRoadCar.fireSecondWheelDrive = function(){
    console.log("second wheel drive has been fired");
  };    
  myOffRoadCar.startDrive(); //Should log raod hrrr szrr instand of brum
  
  var myTruckCar = Object.create(myCar);
    
  //Differances only
  myTruckCar.name = "My track has become truck prototype ";
  myTruckCar.sound = "hrrrrr plum";
  myTruckCar.containerType = "long";
  myTruckCar.cargoType = "wood";
  myTruckCar.relaseCargo = function (){
    console.log("cargo  has been relased");
  };
  myTruckCar.startDrive();
  myTruckCar.relaseCargo();
    
  // aguments params.
  var myRoadsterTruck = Object.create(myTruckCar,{
    name: {
        value: "My beautiful truck", 
        writable: true,
        configurable: true,
        enumerable: true},
    containerType: {value: "short"}
    });
  myRoadsterTruck.startDrive(); // it has not have its own sound so shoud get from myTruckCar.
    
  // It will be not needed i my shiny new truck :)
  myRoadsterTruck.cargoType = undefined;
  myRoadsterTruck.relaseCargo = undefined; 
  }}}

!SLIDE 

## Co nam to wnosi?
* ### Proste tworzenie obiektów i uwspólnianie właściwości.
Nie potrzebujemy dodatkowej abstrakcji jaką jest klasa.

* ### Przeźroczyste _"dziedziczenie"_.
Czy tworzymy kolejny obiekt czy grupę obiektów jest to dla nas to samo - przeźroczyste.

* ### Uwspólniamy kod delegując.
Delegując automatycznie rozwiązuje nam problem z złym dziedziczeniem klasy domenowej po klasie narzędziowej. Brzmi znajomo?

!SLIDE

## Śladami rubiego w javascript - Mixin.js.
Przykład mixin w rubim:

{{{module Printable
  def print_to_pdf
    puts "Text as pdf: #{self.details}"
  end
  
  def print_to_html
    puts "Text as html: #{self.details}"
  end
   
  def print_to_csv
    puts "Text as csv: #{self.details}"
  end
end
   
class Invoice
  include Printable
  attr_accessor :details
end
   
tv_invoice = Invoice.new
tv_invoice.details = "tv invoice for march equal 120 pln"
tv_invoice.print_to_pdf if tv_invoice.respond_to? 'print_to_pdf' 
   
mobile_invoice = Invoice.new 
mobile_invoice.details = "mobile invoice for april 89 pln"
mobile_invoice.print_to_csv if mobile_invoice.respond_to? 'print_to_csv'
}}}

!SLIDE

## Śladami rubiego w javascript - Mixin.js. 
Przykład zmiksowania w javscript:

{{{var printable = {
    printToPdf: {
      value: function()
      {
        console.log("Text as pdf: " + this.details);
      }
    },
    printToHtml: {
      value: function()
      {
        console.log("Text as html: " + this.details);
      }
    },
    printToCsv: {
      value: function(){
        console.log("Text as csv: " + this.details);
      }
    }
  };
  // Invoice maker like constructor but without "new".
  var invoiceMaker = function()
  {
    var _details;
    var _proto = {};
    Object.defineProperties(_proto, printable);
    var _that = Object.create(_proto);
  
    _that.details = _details;
    
    return _that;
  };
  
  tvInvoice = invoiceMaker();
  tvInvoice.details = "tv invoice for march equal 120 pln";
  if(tvInvoice.printToCsv !== undefined) tvInvoice.printToCsv();
   
  mobileInvoice = invoiceMaker();
  mobileInvoice.details = "mobile invoice for april 89 pln";
  if(mobileInvoice.printToHtml !== undefined) mobileInvoice.printToHtml();
}}}

!SLIDE

## Gdzie jest haczyk?
Generalnie jeden kod i drugi robi to samo - deleguje pewne cechy do obiektów, do nowych instancji obiektów.

### Nie liczy się co tylko jak - różnice.
1. Skoro każdego klienta nie obchodzi _"skąd"_ tylko _"czy"_ to naprawdę potrzebny jest nam typ nadawany przez klasę?      
2. Pomyślmy czy potrzebne jest nam też wyróżnienie abstrakcji - moduł? Czy nie lepiej dać domenie zrobić to za Nas? Czy _"prinatble"_ nie jest wystarczającą abstrakcją. W rubim raczej nie. Moduł jest potrzebny bo dodatkowo pokazuje że nie możemy utworzyć nowej instancji. W javascript nie! Tutaj nie ma dla nas znaczenie czy tworzymy nową instancje czy dajemy początek nowej rodzinie obiektów (klasycznie klasie).

### Podążaj za domeną rasistowski przykład!
    Piszemy system gdzie mamy jakiegoś Murzyna. Murzyn biega, skacze ... Za jakiś czas musimy dorobić Żółtka. Robi prawie to samo tylko woli ryż od bananów. Chcielibyśmy wydzielić to co ich łączy. Jeśli to co ich łączy ma swoją rolę w domenie wydzielmy to do czegoś co nazwiemy Human (klasa, obiekt). Jeśli nie ma roli w domenie po prostu zróbmy abstrakcje Humanable w js zwykły obiekt.

!SLIDE

## Gadu gadu ale jak to się ma do SRP czy LSP?

### Dobra delegacja zamiast dziedziczenia lekarstwem na SRP.
Mixin w rubim czy javscript wydaje się radzić super jeśli chodzi o zasady DRY czy SRP. Ponad to jest prosty i zgodny z naturą obu języków.

### Niestety nie radzi sobie z "księdzem" i "kwadratem".
Rozszerzenie klasy za pomocą mixin o ile zapobiegnie przypadkowy złego dziedziczenia po klasie narzędziowej o tyle nie poradzi sobie ze wspomnianymi przypadkami księdza czy kwadrata.

### Czy możemy zatem jakoś w ogóle z tym sobie poradzić?

!SLIDE

## Warunkowa zmiana obiektów.

### Oddzielmy dane od zachowań.

### Rozszerzajmy obiekty warunkowo w runtime.

    Czy to coś zmienia? Zasadniczo kodu w rutime (w pamięci programu) nie dotyczy SRP nie musimy go utrzymywać.
Jeśli chcemy księdza mamy księdza jak chcemy złodzieje mamy złodzieja. To samo z kwadratem. Tutaj po prostu figura raz będzie prostokątem raz kwadratem.


### To wszystko prowadzi do DCI ale to już historia na następny raz.

!SLIDE

## Podsumowanie.

### Javascript mimo swojego wieku wydaje się być całkiem rześkim dziadkiem.

***

### Może się czasami potknie (przekazywanie this, czy też operator new), nie mniej w niektórych momentach jest wstanie prześcignąć rubiego (brak klas, prostota).

***

### Wydaje się zatem idealnym językiem do modelowania domeny, do DCI.
